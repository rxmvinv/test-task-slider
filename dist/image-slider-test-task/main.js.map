{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api-interaction.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/new-slide/new-slide.component.css","webpack:///./src/app/new-slide/new-slide.component.html","webpack:///./src/app/new-slide/new-slide.component.ts","webpack:///./src/app/slide.ts","webpack:///./src/app/slide/slide.component.css","webpack:///./src/app/slide/slide.component.html","webpack:///./src/app/slide/slide.component.ts","webpack:///./src/app/slider/slider.component.css","webpack:///./src/app/slider/slider.component.html","webpack:///./src/app/slider/slider.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;ACZ2C;AAGoB;AAC/D,uEAAuE;AAEvE,IAAM,WAAW,GAAG;IAClB,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;CACjE,CAAC;AAKF;IAuBE,+BACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAGlB,WAAM,GAAG,kCAAkC,CAAC;IAFhD,CAAC;IAvBL,yCAAS,GAAT;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,MAAM,CAAC;IAC5C,CAAC;IAED,wCAAQ,GAAR,UAAU,KAAY;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAQ,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,IAAI;QAChE,+CAA+C;QAC/C,yCAAyC;SAC1C,CAAC;IACJ,CAAC;IAED,2CAAW,GAAX,UAAa,KAAqB;QAC9B,IAAM,EAAE,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;QACxD,IAAM,GAAG,GAAM,IAAI,CAAC,MAAM,SAAI,EAAI,CAAC;QAEnC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAQ,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI;QACnD,wCAAwC;QACxC,kCAAkC;SACnC,CAAC;IACN,CAAC;IArBU,qBAAqB;QAHjC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAyBgB,+DAAU;OAxBf,qBAAqB,CA4BjC;IAAD,4BAAC;CAAA;AA5BiC;;;;;;;;;;;;;;;;;;;;;;;;;;ACbO;AACc;AAEvD,oDAAoD;AACQ;AACQ;AACZ;AAExD,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,wEAAe,EAAC;IACvC,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,gFAAiB,EAAE;CACpD,CAAC;AAOF;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAL5B,8DAAQ,CAAC;YACR,8DAA8D;YAC9D,OAAO,EAAE,CAAE,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,qEAAgB,CAAE;YAC3D,OAAO,EAAE,CAAE,4DAAY,CAAE;SAC1B,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;AClB7B,mB;;;;;;;;;;;ACAA,kO;;;;;;;;;;;;;;;;;;;;;ACA0C;AAO1C;IALA;QAME,UAAK,GAAG,wBAAwB,CAAC;IACnC,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEM;AACa;AACH;AACW;AAEF;AACT;AACD;AAmBxD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAjBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,wEAAe;gBACf,qEAAc;gBACd,gFAAiB;aAClB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,sBAAsB;gBACtB,oEAAgB;gBAChB,qEAAgB;aACjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AC7BtB,mB;;;;;;;;;;;ACAA,m/B;;;;;;;;;;;;;;;;;;;;;;;;ACAqE;AAarE;IACA;;;;MAIE;IACA,yEAAyE;IACzE;IAAgB,CAAC;IAEjB,oCAAQ,GAAR;IACA,CAAC;IAED,yCAAa,GAAb,UAAc,KAAK;IAEnB,CAAC;IAED,+CAAmB,GAAnB,UAAoB,KAAK;IAEzB,CAAC;IAED,wCAAY,GAAZ,UAAa,KAAK;QAChB;;;;;;;;;;;;;;;;UAgBE;IACJ,CAAC;IAED,uCAAW,GAAX,UAAY,KAAK;IAEjB,CAAC;IA1CU,iBAAiB;QAN7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;;OAEW,iBAAiB,CA4C7B;IAAD,wBAAC;CAAA;AA5C6B;;;;;;;;;;;;;ACb9B;AAAA;AAAA;IAAA;IAMA,CAAC;IAAD,YAAC;AAAD,CAAC;;;;;;;;;;;;;ACND,4BAA4B,sBAAsB,KAAK,K;;;;;;;;;;;ACAvD,uCAAuC,aAAa,6CAA6C,UAAU,UAAU,aAAa,WAAW,mBAAmB,0BAA0B,gBAAgB,8G;;;;;;;;;;;;;;;;;;;;;;;;;;ACAjJ;AACxB;AACkC;AACnE,8BAA8B;AAO9B;IAGE,wBAAoB,UAAiC;QAAjC,eAAU,GAAV,UAAU,CAAuB;IAAI,CAAC;IAE1D,iCAAQ,GAAR;IACA,CAAC;IACD,iCAAQ,GAAR,UAAS,KAAY;QACnB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE;IAChD,CAAC;IARQ;QAAR,2DAAK,EAAE;kCAAQ,4CAAK;iDAAC;IADX,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAIgC,8EAAqB;OAH1C,cAAc,CAW1B;IAAD,qBAAC;CAAA;AAX0B;;;;;;;;;;;;ACV3B,sBAAsB,uBAAuB,KAAK,YAAY,4BAA4B,mBAAmB,oBAAoB,sBAAsB,kBAAkB,yBAAyB,KAAK,K;;;;;;;;;;;ACAvM,uOAAuO,mBAAmB,kF;;;;;;;;;;;;;;;;;;;;;;;;;ACAxM;AAEiB;AAOnE;IAGE,yBAAoB,UAAiC;QAAjC,eAAU,GAAV,UAAU,CAAuB;IAAI,CAAC;IAE1D,kCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IACD,oCAAU,GAAV;QAAA,iBAGC;QAFC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;aACxB,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,CAAC,CAAC;IAC/C,CAAC;IAXU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAIgC,8EAAqB;OAH1C,eAAe,CAY3B;IAAD,sBAAC;CAAA;AAZ2B;;;;;;;;;;;;;ACT5B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { Slide } from './slide';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n//import { HttpClientModule, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiInteractionService {\n\n  getSlides (): Observable<Slide[]> {\n    return this.http.get<Slide[]>(this.apiUrl)\n  }\n\n  addSlide (slide: Slide): Observable<Slide> {\n    return this.http.post<Slide>(this.apiUrl, slide, httpOptions).pipe(\n      //console.log(`added slide w/ id=${slide.id}`),\n      //catchError(error => console.log(error))\n    );\n  }\n\n  removeSlide (slide: Slide | number): Observable<Slide> {\n      const id = typeof slide === 'number' ? slide : slide.id;\n      const url = `${this.apiUrl}/${id}`;\n\n      return this.http.delete<Slide>(url, httpOptions).pipe(\n        //console.log(`deleted slide id=${id}`),\n        //catchError(console.error(error))\n      );\n  }\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  private apiUrl = 'http://localhost:3000/api/slides';\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n//import { HttpClient } from '@angular/common/http';\nimport { SliderComponent } from './slider/slider.component';\nimport { NewSlideComponent } from './new-slide/new-slide.component';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst routes: Routes = [\n  { path: '', component: SliderComponent},\n  { path: 'new-slide', component: NewSlideComponent }\n];\n\n@NgModule({\n  //imports: [ RouterModule.forRoot(routes), HttpClientModule ],\n  imports: [ RouterModule.forRoot(routes), HttpClientModule ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>Test slider</h1>\\n  <!--<app-slider></app-slider>-->\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'image-slider-test-task';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { SliderComponent } from './slider/slider.component';\nimport { SlideComponent } from './slide/slide.component';\nimport { NewSlideComponent } from './new-slide/new-slide.component';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SliderComponent,\n    SlideComponent,\n    NewSlideComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    //ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <h1>New Slide</h1>\\n    <form>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"title\\\">Title:</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" required  (change)=\\\"onTitleChange($event)\\\" name=\\\"title\\\">\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"description\\\">Description:</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" required  (change)=\\\"onDescriptionChange($event)\\\" name=\\\"description\\\">\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"image\\\">Image:</label>\\n        <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"onFileChange($event)\\\" name=\\\"image\\\" />\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"url\\\">Url:</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" (change)=\\\"onUrlChange($event)\\\" name=\\\"url\\\">\\n      </div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n\\n    </form>\\n</div>\\n\"","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { ApiInteractionService } from '../api-interaction.service';\n//import { FormsModule, FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { Slide } from '../slide';\n\n@Component({\n  selector: 'app-new-slide',\n  templateUrl: './new-slide.component.html',\n  styleUrls: ['./new-slide.component.css']\n})\n\nexport class NewSlideComponent implements OnInit {\n/*\n  formGroup = this.fb.group({\n    file: [null, Validators.required]\n  });\n*/\n  //constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) { }\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onTitleChange(event) {\n\n  }\n\n  onDescriptionChange(event) {\n\n  }\n\n  onFileChange(event) {\n    /*\n    let reader = new FileReader();\n\n    if(event.target.files && event.target.files.length) {\n      const [file] = event.target.files;\n      reader.readAsDataURL(file);\n\n      reader.onload = () => {\n        this.formGroup.patchValue({\n          file: reader.result\n        });\n\n        // need to run CD since file load runs outside of zone\n        this.cd.markForCheck();\n      };\n    }\n    */\n  }\n\n  onUrlChange(event) {\n\n  }\n\n}\n","export class Slide {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  embedded: string\r\n}\r\n","module.exports = \".central {\\r\\n  background: red;\\r\\n}\\r\\n\"","module.exports = \"<li>\\n  <img src=\\\"{{slide.image}}\\\" alt=\\\"image\\\">\\n  <span class=\\\"badge\\\">{{slide.id}}</span> {{slide.title}}\\n  <div>{{slide.description}}</div>\\n  <span>Iframe: {{slide.embedded}}</span>\\n  <button type=\\\"button\\\" name=\\\"remove-slide\\\" (click)=\\\"onRemove(slide)\\\">remove</button>\\n</li>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Slide } from '../slide';\nimport { ApiInteractionService } from '../api-interaction.service';\n//import * as $ from 'jquery';\n\n@Component({\n  selector: 'app-slide',\n  templateUrl: './slide.component.html',\n  styleUrls: ['./slide.component.css']\n})\nexport class SlideComponent implements OnInit {\n  @Input() slide: Slide;\n\n  constructor(private apiService: ApiInteractionService) { }\n\n  ngOnInit() {\n  }\n  onRemove(slide: Slide): void {\n    this.apiService.removeSlide(slide).subscribe()\n  }\n\n}\n","module.exports = \"ul {\\r\\n  list-style: none;\\r\\n}\\r\\n\\r\\nli {\\r\\n  display: inline-block;\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background: red;\\r\\n  margin: 5px;\\r\\n  border-radius: 20%;\\r\\n}\\r\\n\"","module.exports = \"<h2>Slides</h2>\\n<div class=\\\"list-box\\\">\\n  <ul class=\\\"slides\\\">\\n      <app-slide  *ngFor=\\\"let slide of slides\\\" [slide]=\\\"slide\\\"></app-slide>\\n      <!--<app-slide  *ngFor=\\\"let slide of slides\\\" [slide]=\\\"{ $implicit: slide }\\\"></app-slide>-->\\n  </ul>\\n</div>\\n\\n<a routerLink=\\\"/new-slide\\\">Add New</a>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Slide } from '../slide';\nimport { ApiInteractionService } from '../api-interaction.service';\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.css']\n})\nexport class SliderComponent implements OnInit {\n  slides: Slide[];\n\n  constructor(private apiService: ApiInteractionService) { }\n\n  ngOnInit() {\n    this.loadSlides();\n  }\n  loadSlides(): void {\n    this.apiService.getSlides()\n      .subscribe(slides => this.slides = slides);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}